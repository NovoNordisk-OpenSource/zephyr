% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/msg.R
\name{msg}
\alias{msg}
\alias{msg_debug}
\alias{msg_success}
\alias{msg_minimal}
\title{Write messages based on verbosity level}
\usage{
msg(
  message,
  levels_to_write = c("minimal", "verbose", "debug"),
  msg_fun = cli::cli_alert_info,
  ...,
  verbosity_level = NULL,
  which = -1,
  .envir = parent.frame()
)

msg_debug(
  message,
  ...,
  verbosity_level = NULL,
  which = -1,
  .envir = parent.frame()
)

msg_success(
  message,
  ...,
  verbosity_level = NULL,
  which = -1,
  .envir = parent.frame()
)

msg_minimal(
  message,
  ...,
  verbosity_level = NULL,
  which = -1,
  .envir = parent.frame()
)
}
\arguments{
\item{message}{\code{character} of message to write}

\item{levels_to_write}{\code{character} vector of levels of verbosity for which
to display the message. Valid values are \code{quiet}, \code{minimal}, \code{verbose}, and \code{debug}}

\item{msg_fun}{\code{function} taking \code{message} as first argument. Usually a
\code{cli_...} function}

\item{...}{Additional arguments passed to \code{msg_fun}}

\item{verbosity_level}{The verbosity level to use. If \code{NULL}, the function
will use the \code{which} argument to determine the environment in which to find
an option called \code{verbosity_level}. By default, it will look in the environment
of the function calling \verb{msg(_...)}. If no option is set in this calling
environment, it will look in the \code{zephyr} namespace.}

\item{which}{\code{integer} passed to \code{\link[=sys.function]{sys.function()}} in case \code{verbosity_level = NULL}.
Default is -1, meaning it will look in the environment of the function calling \verb{msg(_...)}.}

\item{.envir}{\code{environment} passed to \code{msg_fun}}
}
\value{
None
}
\description{
The \code{msg} function is a general function for writing messages to the console
based on options set using the \link{options} package. As a default, an option
called \code{verbosity_level} set in the package defining a function calling \code{msg}
is used. If a global option with prefix \code{zephyr.} is set, it will overwrite
the package level option.

Valid values are \code{quiet}, \code{minimal}, \code{verbose}, and \code{debug}.
\itemize{
\item \code{quiet}: No messages are displayed
\item \code{minimal}: Only essential messages are displayed
\item \code{verbose}: Informative messages are displayed (default)
\item \code{debug}: Detailed messages for debugging are displayed
}
}
\details{
The \code{msg} function is a general function, which can be used to write messages
based on options.

The \code{msg_debug} function is a wrapper around \code{msg} with
\code{levels_to_write = "debug"} and \code{msg_fun = cli::cli_inform}.

The \code{msg_success} function is a wrapper around \code{msg} with
\code{levels_to_write = c("minimal", "verbose", "debug")} and \code{msg_fun = cli::cli_alert_success}.

The \code{msg_minimal} function is a wrapper around \code{msg} with
\code{levels_to_write = c("minimal", "verbose", "debug")} and \code{msg_fun = cli::cli_alert_info}.
}
\examples{
filter_data <-  function(data, infilter, ...) {
  infilter_e <- rlang::enquo(infilter)
  infilter_lb <- rlang::as_label(infilter_e)

  msg("Attempting to filter {.field data} by {.field {infilter_lb}}",
    levels_to_write = c("verbose", "debug"),
    msg_fun = cli::cli_h2)

  msg_debug("Trying to filter data")

  result <- data |>
    dplyr::filter({{infilter}})

  msg_success("Data filtered by {.field {infilter_lb}}")
  msg_minimal("Filtered {nrow(result)} rows")

  head(result)
}

# Test with different verbosity levels
withr::with_options(list(verbosity_level = "quiet"),
  filter_data(data = cars, infilter = speed > 12))

withr::with_options(list(verbosity_level = "minimal"),
  filter_data(data = cars, infilter = speed > 12))

withr::with_options(list(verbosity_level = "verbose"),
  filter_data(data = cars, infilter = speed > 12))

withr::with_options(list(verbosity_level = "debug"),
  filter_data(data = cars, infilter = speed > 12))

}
