% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_verbosity_level.R
\name{get_verbosity_level}
\alias{get_verbosity_level}
\title{Get \code{verbosity_level} option, allowing a global option to overwrite individual package options.}
\usage{
get_verbosity_level(env = parent.frame())
}
\arguments{
\item{env}{Environment to get the option from.}
}
\value{
Value of the option.
}
\description{
This function retrieves the value of the \code{verbosity_level} option, with the option
for a global setting to override package-specific settings.
}
\examples{
# Setting a "global option" overwrites the behavior, i.e., the example below will
# never write anything to the console no matter the option set in the
# package where the filter_data function is located (as an example this package
# is here called "newpackage").

filter_data <- function(data, infilter, ...) {

  # Defusing the filter arguments
  infilter_e <- rlang::enquo(infilter)
  infilter_lb <- rlang::as_label(infilter_e)

  msg("Filtering {.field data} by {.field {infilter_lb}}",
      levels_to_write = c("verbose", "debug"),
      msg_fun = cli::cli_h2)

  # Adding a debug message that only will appear if verbosity level is set to
  # "debug"
  msg_debug("Trying to filter data")

  data |>
    dplyr::filter({{infilter}})

  msg_success("Data filtered by {.field {infilter_lb}}")
}

withr::with_options(
  list(zephyr.verbosity_level = "verbose",
       newpacakge.verbosity_level = "verbose"),
  filter_data(data = cars, infilter = speed > 12)
)

withr::with_options(
  list(zephyr.verbosity_level = "quiet",
       newpacakge.verbosity_level = "verbose"),
  filter_data(data = cars, infilter = speed > 12)
)
}
