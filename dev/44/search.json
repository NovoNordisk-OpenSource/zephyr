[{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2025 Novo Nordisk A/S, Danish company registration no. 24256790  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aksel Thomsen. Author, maintainer. Mathias Lerbech Jeppesen. Author. Cervan Girard. Author. Kristian Troejelsgaard. Author. Lovemore Gakava. Author. Steffen Falgreen Larsen. Author. Vladimir Obucina. Author. Skander Mulder. Author. Novo Nordisk /S. Copyright holder.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomsen , Jeppesen M, Girard C, Troejelsgaard K, Gakava L, Larsen S, Obucina V, Mulder S (2025). zephyr: Structured Messages Options. R package version 0.1.2.9003, https://novonordisk-opensource.github.io/zephyr/.","code":"@Manual{,   title = {zephyr: Structured Messages and Options},   author = {Aksel Thomsen and Mathias Lerbech Jeppesen and Cervan Girard and Kristian Troejelsgaard and Lovemore Gakava and Steffen Falgreen Larsen and Vladimir Obucina and Skander Mulder},   year = {2025},   note = {R package version 0.1.2.9003},   url = {https://novonordisk-opensource.github.io/zephyr/}, }"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"zephyr-","dir":"","previous_headings":"","what":"Structured Messages and Options","title":"Structured Messages and Options","text":"zephyr package provides small functionalities developers R packages inform users progress issues, time allowing users easily configure amount information want receive. zephyr also utilities create, get, document options used packages. zephyr package designed intended use within R packages developed published Novo Nordisk Open Source ecosystem. packages outside ecosystem, recommend using options package instead complete implementation package options.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structured Messages and Options","text":"","code":"# Install the released version from CRAN: install.packages(\"zephyr\") # Install the development version from GitHub: pak::pak(\"NovoNordisk-OpenSource/zephyr\")"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"use-zephyr","dir":"","previous_headings":"","what":"Use zephyr","title":"Structured Messages and Options","text":"easiest way use zephyr package set use_zephyr() function. creates new script R/{pkgname}-options.R relevant boilerplate code use zephyr options package. adds verbosity_level option, user can change configure amount information. information different levels see ?verbosity_level. New options package can added create_option() used afterwards get_option() inside functions. Documentation automatically generated list_options().","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"messages-and-verbosity","dir":"","previous_headings":"","what":"Messages and verbosity","title":"Structured Messages and Options","text":"backbone zephyr msg() friends functions. used inside functions give consistent levels information users. main functions : msg_success(): show success long complicated operation. msg_danger(): show failed operation. Note throwing error. Use cli::cli_abort() case. msg_warning(): indicate warning. msg_info(): give detailed information. msg_debug(): give debugging information. functions already wrapped around appropriate {cli} functions relevant verbosity_level.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"example","dir":"","previous_headings":"Messages and verbosity","what":"Example","title":"Structured Messages and Options","text":"Let’s say function long complicated calculations, creates output. want use zephyr msg() functions inform user progress result. skeleton use function foo() function : first provide debugging information requested. inform calculations starting. calculations, inform user output created correctly . default verbosity_level zephyr verbose displays messages expect debugging: verbosity_level = \"minimal\" msg_success() msg_danger() messages shown: can turned completely verbosity_level = \"quiet\", verbosity_level = \"debug\" gives messages:","code":"foo <- function() {   msg_debug(\"Some important debug information about the function\")   msg_info(\"Starting calculations\")    result <- 1 + 1 # Replace with long calculations and how to create output    if (result == 2) {     msg_success(\"Output created\")   } else {     msg_danger(\"Output not created correctly\")   }    return(result) } foo() #> ℹ Starting calculations #> ✔ Output created #> [1] 2 withr::with_options(   new = list(zephyr.verbosity_level = \"minimal\"),   code = foo() ) #> ✔ Output created #> [1] 2 withr::with_options(   new = list(zephyr.verbosity_level = \"quiet\"),   code = foo() ) #> [1] 2  withr::with_options(   new = list(zephyr.verbosity_level = \"debug\"),   code = foo() ) #> → Some important debug information about the function #> ℹ Starting calculations #> ✔ Output created #> [1] 2"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/create_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Create package option — create_option","title":"Create package option — create_option","text":"Use inside package setup zephyr_option can use functions get_option(). specification stored inside environment package. information get started see use_zephyr().","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/create_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create package option — create_option","text":"","code":"create_option(name, default, description = name, .envir = parent.frame())"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/create_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create package option — create_option","text":"name [character(1)] Name option default [] Default value option description [character(1)] Description option .envir Environment option defined. Default suitable use inside package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/create_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create package option — create_option","text":"Invisible zephyr_option object","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/create_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create package option — create_option","text":"","code":"if (FALSE) { create_option(   name = \"answer\",   default = 42,   description = \"This is supposed to be the question\" ) }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all verbosity levels — get_all_verbosity_levels","title":"Get all verbosity levels — get_all_verbosity_levels","text":"Retrieves active verbosity levels set loaded packages. See also verbosity_level get_verbosity_level().","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all verbosity levels — get_all_verbosity_levels","text":"","code":"get_all_verbosity_levels()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all verbosity levels — get_all_verbosity_levels","text":"Named [character()] vector package names verbosity levels values.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all verbosity levels — get_all_verbosity_levels","text":"","code":"get_all_verbosity_levels() #>    zephyr  #> \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get value of package option — get_option","title":"Get value of package option — get_option","text":"Retrieves value zephyr_option. value looked following order: User defined option: {pkgname}.{name} System variable: R_{PKGNAME}_{NAME} Default value defined create_option() returns first set value.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get value of package option — get_option","text":"","code":"get_option(name, .envir = sys.function(which = -1))"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get value of package option — get_option","text":"name [character(1)] Name option .envir Environment option defined. Default suitable use inside package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get value of package option — get_option","text":"Value option","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get value of package option — get_option","text":"Environment variables always defined character strings. order return consistent values following conversions applied: contain \";\" split vector using \";\" delimiter. class default value character, value converted class using naive .{class} function. E.g. conversions numeric done .numeric(). conversions simple nature cover advanced cases, try keep options simple.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get value of package option — get_option","text":"","code":"# Retrieve the verbosity level option set by default in zephyr: get_option(name = \"verbosity_level\", .envir = \"zephyr\") #> [1] \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get verbosity level — get_verbosity_level","title":"Get verbosity level — get_verbosity_level","text":"function retrieves verbosity_level environment using priority hierarchy described verbosity_level. examples use zephyr, function works package, inside package necessary specify ; default value .envir enough. normally relevant query verbosity_level . Instead use appropriate msg function.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get verbosity level — get_verbosity_level","text":"","code":"get_verbosity_level(.envir = sys.function(which = -1))"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get verbosity level — get_verbosity_level","text":".envir Environment options defined. Default suitable use inside package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get verbosity level — get_verbosity_level","text":"[character(1)] representing verbosity level.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get verbosity level — get_verbosity_level","text":"","code":"# Get the verbosity level # Note: Specifying the environment is not needed when used inside a package get_verbosity_level(\"zephyr\") #> [1] \"verbose\"  # Temporarily change verbosity level using an environment variable withr::with_envvar(   new = c(\"R_ZEPHYR_VERBOSITY_LEVEL\" = \"quiet\"),   code = get_verbosity_level(\"zephyr\") ) #> [1] \"quiet\"  # Temporarily change verbosity level using an option value withr::with_options(   new = c(\"zephyr.verbosity_level\" = \"minimal\"),   code = get_verbosity_level(\"zephyr\") ) #> [1] \"minimal\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/list_options.html","id":null,"dir":"Reference","previous_headings":"","what":"List package options — list_options","title":"List package options — list_options","text":"List zephyr_options specified package. Either list character vector formatted use package documentation. document options use use_zephyr() set everything , edit created template necessary.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/list_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List package options — list_options","text":"","code":"list_options(   as = c(\"list\", \"params\", \"markdown\"),   .envir = sys.function(which = -1) )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/list_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List package options — list_options","text":"[character(1)] Format return options: \"list\": Return nested list, top level element list specification option. \"params\": Return character vector \"@param\" tag entries option similar function parameters documented roxygen2. \"markdown\": Return character string markdown formatted entries option. .envir Environment options defined. Default suitable use inside package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/list_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List package options — list_options","text":"list character depending ","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/list_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List package options — list_options","text":"","code":"# List all options in zephyr x <- list_options(.envir = \"zephyr\") print(x) #>  #> ── verbosity_level  #> test #> • Default: `\"verbose\"` #> • Option: `zephyr.verbosity_level` #> • Environment: `R_ZEPHYR_VERBOSITY_LEVEL` str(x) #> List of 1 #>  $ verbosity_level:List of 4 #>   ..$ default    : chr \"verbose\" #>   ..$ name       : chr \"verbosity_level\" #>   ..$ description: chr \"test\" #>   ..$ environment: chr \"zephyr\" #>   ..- attr(*, \"class\")= chr \"zephyr_option\" #>  - attr(*, \"class\")= chr \"zephyr_options\"  # Create @params tag entries for each option list_options(as = \"params\", .envir = \"zephyr\") |>   cat() #> @param verbosity_level test. Default: `\"verbose\"`.  # List options in markdown format list_options(as = \"markdown\", .envir = \"zephyr\") |>   cat() #> ## verbosity_level #> test #> * Default: `\"verbose\"` #> * Option: `zephyr.verbosity_level` #> * Environment: `R_ZEPHYR_VERBOSITY_LEVEL`"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Write messages based on verbosity level — msg","title":"Write messages based on verbosity level — msg","text":"msg() function general utility function writing messages console based verbosity_level set session package. simple messages functions recommended approach use following wrappers consistency across packages: msg_success(): indicate successful operation. Wrapper around msg() using cli::cli_alert_success() display message. msg_danger(): indicate failed operation. Wrapper around msg() using cli::cli_alert_danger() display message. msg_warning(): indicate warning. Wrapper around msg_verbose() using cli::cli_alert_warning() display message. msg_info(): provide additional information. Wrapper around msg_verbose() using cli::cli_alert_info() display message. control messages displayed use: msg(): write messages using custom msg_fun functions define verbosity levels write. msg_verbose(): write verbose messages custom msg_fun. msg_debug(): report messages relevant debugging. information verbosity levels, see verbosity_level.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write messages based on verbosity level — msg","text":"","code":"msg(   message,   levels_to_write = c(\"minimal\", \"verbose\", \"debug\"),   msg_fun = cli::cli_alert,   ...,   .envir = parent.frame() )  msg_verbose(message, msg_fun = cli::cli_alert, ..., .envir = parent.frame())  msg_debug(message, msg_fun = cli::cli_alert, ..., .envir = parent.frame())  msg_success(message, ..., .envir = parent.frame())  msg_danger(message, ..., .envir = parent.frame())  msg_warning(message, ..., .envir = parent.frame())  msg_info(message, ..., .envir = parent.frame())"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write messages based on verbosity level — msg","text":"message character string text display. levels_to_write character vector verbosity levels message displayed. Options minimal, verbose, debug. msg_fun function use writing message. commonly cli package. Default cli::cli_alert(). ... Additional arguments pass msg_fun() .envir environment use evaluating verbosity level. Default parent.frame() sufficient use cases. Parsed msg_fun().","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write messages based on verbosity level — msg","text":"Return msg_fun()","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write messages based on verbosity level — msg","text":"","code":"msg(\"General message\") #> → General message msg_success(\"Operation successful\") #> ✔ Operation successful msg_danger(\"Operation failed\") #> ✖ Operation failed msg_warning(\"Warning message\") #> ! Warning message msg_info(\"Additional information\") #> ℹ Additional information"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Report collection of assertions — report_checkmate_assertions","title":"Report collection of assertions — report_checkmate_assertions","text":"Improved reporting AssertCollection created checkmate::makeAssertCollection() using cli::cli_abort() instead checkmate::reportAssertions() order provide informative error message. function intended used inside function performs assertions input arguments.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"report_checkmate_assertions(   collection,   message = \"Invalid input(s):\",   .envir = parent.frame() )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report collection of assertions — report_checkmate_assertions","text":"collection [AssertCollection] collection assertions created checkmate::makeAssertCollection(). message [character(1)] string header error message assertions failed .envir [environment] use error message. Default parent.frame() sufficient use cases.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report collection of assertions — report_checkmate_assertions","text":"invisible(TRUE)","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"add_numbers <- function(a, b) {   collection <- checkmate::makeAssertCollection()   checkmate::assert_numeric(x = a, add = collection)   checkmate::assert_numeric(x = b, add = collection)   report_checkmate_assertions(collection)   return(a + b) }  add_numbers(1, 2) #> [1] 3 try(add_numbers(1, \"b\")) #> Error in add_numbers(1, \"b\") : Invalid input(s): #> ✖ Variable 'b': Must be of type 'numeric', not 'character'. try(add_numbers(\"a\", \"b\")) #> Error in add_numbers(\"a\", \"b\") : Invalid input(s): #> ✖ Variable 'a': Must be of type 'numeric', not 'character'. #> ✖ Variable 'b': Must be of type 'numeric', not 'character'."},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/use_zephyr.html","id":null,"dir":"Reference","previous_headings":"","what":"Use zephyr options and verbosity levels — use_zephyr","title":"Use zephyr options and verbosity levels — use_zephyr","text":"Utility function set use zephyr options verbosity_level package. Creates file R/{pkgname}-options.R boiler plate code setup document options. code also creates package specific verbosity_level option, enabling control verbosity package functions using msg functions.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/use_zephyr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use zephyr options and verbosity levels — use_zephyr","text":"","code":"use_zephyr()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/use_zephyr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use zephyr options and verbosity levels — use_zephyr","text":"invisible(TRUE)","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/use_zephyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use zephyr options and verbosity levels — use_zephyr","text":"","code":"if (FALSE) { use_zephyr() }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/verbosity_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbosity level to control package behavior — verbosity_level","title":"Verbosity level to control package behavior — verbosity_level","text":"zephyr define central verbosity level control amount messages user receives using zephyr packages ecosystem. Verbosity level can four values : quiet: messages displayed. minimal: essential messages displayed. verbose (default): informative messages displayed. debug: Detailed messages debugging displayed. See use_zephyr() msg implement use verbosity levels package functions. Verbosity level special kind option can scoped specific package globally ecosystem (assigned zephyr package). can set using either R options() environment variables. Verbosity level retrieved using get_verbosity_level() function. Since level can multiples scopes, following hierarchy used: Package specific option: {pkgname}.verbosity_level Package specific environment variable: R_{PKGNAME}_VERBOSITY_LEVEL Ecosystem wide option: zephyr.verbosity_level Ecosystem wide environment variable (R_ZEPHYR_VERBOSITY_LEVEL) Default value specified zephyr (verbose, see ). order see registered verbosity levels across scopes call get_all_verbosity_levels().","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/verbosity_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verbosity level to control package behavior — verbosity_level","text":"","code":"get_verbosity_level(\"zephyr\") #> [1] \"verbose\" get_all_verbosity_levels() #>    zephyr  #> \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"zephyr: Structured Messages and Options — zephyr-package","title":"zephyr: Structured Messages and Options — zephyr-package","text":"Provides structured framework consistent user communication configuration management package developers.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"zephyr: Structured Messages and Options — zephyr-package","text":"Maintainer: Aksel Thomsen oath@novonordisk.com Authors: Mathias Lerbech Jeppesen nmlj@novonordisk.com Cervan Girard cgid@novonordisk.com Kristian Troejelsgaard ktqn@novonordisk.com Lovemore Gakava lvgk@novonordisk.com Steffen Falgreen Larsen sffl@novonordisk.com Vladimir Obucina vlob@novonordisk.com Skander Mulder sktf@novonordisk.com contributors: Novo Nordisk /S [copyright holder]","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-012","dir":"Changelog","previous_headings":"","what":"zephyr 0.1.2","title":"zephyr 0.1.2","text":"CRAN release: 2025-03-13 Fixes bug msg() verbosity level package using zephyr respected.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-011","dir":"Changelog","previous_headings":"","what":"zephyr 0.1.1","title":"zephyr 0.1.1","text":"CRAN release: 2025-01-28 Fixes bug list_options() able document options non vector default values, length different one. get_option() now gives consistent return non vector options, e.g. functions.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-010","dir":"Changelog","previous_headings":"","what":"zephyr 0.1.0","title":"zephyr 0.1.0","text":"CRAN release: 2025-01-17 Initial release CRAN. Provides structured framework consistent user communication configuration management package developers.","code":""}]
