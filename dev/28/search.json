[{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2024 Novo Nordisk A/S, Danish company registration no. 24256790  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aksel Thomsen. Author, maintainer. Mathias Lerbech Jeppesen. Author. Cervan Girard. Author. Kristian Troejelsgaard. Author. Lovemore Gakava. Author. Steffen Falgreen Larsen. Author. Vladimir Obucina. Author. Novo Nordisk /S. Copyright holder.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomsen , Jeppesen M, Girard C, Troejelsgaard K, Gakava L, Larsen S, Obucina V (2024). zephyr: Tools Informing Users Based Package Options. R package version 0.0.5, https://github.com/NovoNordisk-OpenSource/zephyr, https://novonordisk-opensource.github.io/zephyr/.","code":"@Manual{,   title = {zephyr: Tools for Informing Users Based on Package Options},   author = {Aksel Thomsen and Mathias Lerbech Jeppesen and Cervan Girard and Kristian Troejelsgaard and Lovemore Gakava and Steffen Falgreen Larsen and Vladimir Obucina},   year = {2024},   note = {R package version 0.0.5, https://github.com/NovoNordisk-OpenSource/zephyr},   url = {https://novonordisk-opensource.github.io/zephyr/}, }"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"zephyr-","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"zephyr package provides small functionalities developers R packages inform users progress issues, time allowing easily configure amount information want receive package level options. probably encountered arguments like verbose silent miscellaneous functions. arguments used control whether print information console, developer function usually done logical check inside function, TRUE, print information console. developer, logical checks explicitly time information printed () can create lot redundant code. users, need set argument function call time want change default behaviour, often users left dichotomy either getting every piece information none. zephyr package provides tools making easier developers end users. done providing functionalities writing messages automatically performs logical check based verbosity level set package options. verbosity level can set package level, user can easily configure verbosity level setting options environmental variables either package level prefix packagename., globally alter behavior functions zephyr setting options environmental variables prefix zephyr..","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"zephyr-message-functionalities","dir":"","previous_headings":"","what":"Zephyr message functionalities","title":"Tools for Informing Users Based on Package Options","text":"functionalities intended used developers R packages. basic principle functions explained showed use functions context R package development.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"basic-features","dir":"","previous_headings":"Zephyr message functionalities","what":"Basic features","title":"Tools for Informing Users Based on Package Options","text":"backbone functions zephyr msg, msg_debug msg_success collectively referred msg functions remainder README. common documentation page can accessed ?msg. purpose functions write messages console dependent verbosity_level can specified options. Specifically, outlined message written console verbosity_level matching level levels_to_write. Note able control function use writing messages console argument msg_fun (default msg_fun = cli::cli_alert_info), wrapper functions msg_debug msg_success available (see documentation using ?msg) default msg_fun = cli::cli_inform msg_fun = cli::cli_alert_success, respectively.","code":"msg(\"testing\",     levels_to_write = c(\"verbose\", \"debug\"),     verbosity_level = \"verbose\") #> ℹ testing  msg(\"testing\",     levels_to_write = c(\"verbose\", \"debug\"),     verbosity_level = \"quiet\")"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"controlling-the-verbosity-level-through-zephyr-package-options","dir":"","previous_headings":"Zephyr message functionalities","what":"Controlling the verbosity level through zephyr package options","title":"Tools for Informing Users Based on Package Options","text":"verbosity level can specified argument withing function. However, behavior can controlled package level options. default, verbosity_level = NULL, means fetch verbosity_level option set zephyr package function used ‘directly’, function used inside another function, fetch verbosity_level option set package function called msg function.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"setting-a-package-option","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through zephyr package options","what":"Setting a package option","title":"Tools for Informing Users Based on Package Options","text":"default package level verbosity_level set “verbose”. can view running following code: verbosity_level argument specified (.e. left verbosity_level = NULL), msg function fetch verbosity_level option set zephyr package:","code":"opt_pkg(\"verbosity_level\", envir = \"zephyr\") #> [1] \"verbose\" # Will not write a message withr::with_envvar(list(R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\"), {   msg(\"testing\") }) # Will write a message withr::with_options(list(zephyr.verbosity_level = \"debug\"), {   msg_debug(\"testing\") }) #> testing # Default set option is \"verbose\", so this will also write a message msg_success(\"testing\") #> ✔ testing"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"usage-in-r-package-development","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through zephyr package options","what":"Usage in R package development","title":"Tools for Informing Users Based on Package Options","text":"verbosity_level option can also specified developer’s R package. , behavior msg functions controlled package level option, users can easily control verbosity level entire package. default msg functions fetch verbosity_level option set package function wherein msg function called. using zephyr options, verbosity level determined checking following sources order priority: Global package-specific option: options(\"[package].verbosity_level\") Package-specific environment variable: Sys.getenv(\"R_[PACKAGE]_VERBOSITY_LEVEL\") Global Zephyr package option: options(\"zephyr.verbosity_level\") Zephyr environment variable: Sys.getenv(\"R_ZEPHYR_VERBOSITY_LEVEL\") Package-specific option set define_option_pkg(\"verbosity_level\") Default value: “verbose”","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"simulating-creation-of-a-package","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through zephyr package options > Usage in R package development","what":"Simulating creation of a package","title":"Tools for Informing Users Based on Package Options","text":"create environment option verbosity_level specified, function foo uses msg function:","code":"simulate_package_env <- function(parent_pkg_name, new_pkg_name) {   parent_env <- as.environment(paste0(\"package:\", parent_pkg_name))   pkg_env <- new.env(parent = parent_env)    # Set the name of the new environment using attr   attr(pkg_env, \"name\") <- paste0(new_pkg_name)    r_files <- list.files(path = \"R\", pattern = \"\\\\.R$\", full.names = TRUE)   for (file in r_files) {     sys.source(file, envir = pkg_env)   }   pkg_env }  filter_data <-  function(data, infilter, ...) {   infilter_e <- rlang::enquo(infilter)   infilter_lb <- rlang::as_label(infilter_e)    msg(     \"Attempting to filter {.field data} by {.field {infilter_lb}}\",     levels_to_write = c(\"verbose\", \"debug\"),     msg_fun = cli::cli_h2   )    msg_debug(\"debug: Trying to filter data\")    result <- data |>     dplyr::filter({{infilter}})    msg_success(\"success: Data filtered by {.field {infilter_lb}}\")   msg_minimal(\"minimal: Filtered {nrow(result)} rows\")    invisible(result)  }  # Simulate the package environment pkg_env <- simulate_package_env(\"zephyr\", \"foo_pkg\")  pkg_env$filter_data <-  filter_data  # Access the function (foo_func <- pkg_env$filter_data) #> function(data, infilter, ...) { #>   infilter_e <- rlang::enquo(infilter) #>   infilter_lb <- rlang::as_label(infilter_e) #>  #>   msg( #>     \"Attempting to filter {.field data} by {.field {infilter_lb}}\", #>     levels_to_write = c(\"verbose\", \"debug\"), #>     msg_fun = cli::cli_h2 #>   ) #>  #>   msg_debug(\"debug: Trying to filter data\") #>  #>   result <- data |> #>     dplyr::filter({{infilter}}) #>  #>   msg_success(\"success: Data filtered by {.field {infilter_lb}}\") #>   msg_minimal(\"minimal: Filtered {nrow(result)} rows\") #>  #>   invisible(result) #>  #> }   # Call the function foo_func(data = cars, infilter = speed > 12) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"default-implicit-behavior-when-using-msg-functions-in-your-package","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"default msg functions fetch verbosity_level option set foo_pkg calling foo: However, feature package (specifically get_verbosity_level function) can set verbosity level individual packages globally setting [package].verbosity_level option, take precedence settings. global Zephyr package option zephyr.verbosity_level override package-specific settings package-specific global option environment variable set. Setting environmental variable R_ZEPHYR_VERBOSITY_LEVEL override package level option case package level option set using foo_pkg_verbosity_level:","code":"# Does not write a message withr::with_envvar(list(R_FOO_PKG_VERBOSITY_LEVEL = \"quiet\"), {   foo_func(data = cars, infilter = speed > 12) })  # Writes a message withr::with_options(list(foo_pkg.verbosity_level = \"debug\"), {   foo_func(data = cars, infilter = speed > 12) }) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> debug: Trying to filter data #> ✔ success: Data filtered by speed > 12 #>  #> ℹ minimal: Filtered 35 rows # Will not write a message withr::with_options(list(   foo_pkg.verbosity_level = \"quiet\",   zephyr.verbosity_level = \"verbose\" ), {   foo_func(data = cars, infilter = speed > 12) }) # Will write a message since the package-specific environment variable overrides the Zephyr environment variable   withr::with_envvar(list(   R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\",   R_FOO_PKG_VERBOSITY_LEVEL = \"verbose\" ), {   foo_func(data = cars, infilter = speed > 12) }) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows  # Will write a message since global package-specific option overrides the Zephyr environment variable withr::with_envvar(list(R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\"), {   withr::with_options(list(foo_pkg.verbosity_level = \"verbose\"), {     foo_func(data = cars, infilter = speed > 12)   }) }) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"controlling-verbosity-level-through-options-with-more-transparency-for-the-user","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"default behavior described can used control verbosity level package level options without specify anything. case, write documentation functions verbosity level can controlled options. case transparent solution wanted, package level option can set, zephyr::get_verbosity_level(env = \"foo_pkg\") can used get default value function (opt_pkg(\"foo_pkg.verbosity_level\", envir = foo_pkg) function case ’s wanted able override options “global zephyr level”). creating function foo package foo_pkg solution look like :","code":"foo <- function(my_arg,                 verbosity_level = zephyr::get_verbosity_level(env = \"foo_pkg\")) {   zephyr::msg_debug(\"Inform my user the function is trying to do stuff\",                     verbosity_level = verbosity_level)   # Do stuff   zephyr::msg_success(\"Inform my user that stuff succeeded\", verbosity_level = verbosity_level) }"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"summary-of-how-to-use-zephyr-in-your-package","dir":"","previous_headings":"Zephyr message functionalities","what":"Summary of how to use zephyr in your package","title":"Tools for Informing Users Based on Package Options","text":"Set verbosity_level package level option package (see R/zephyr-options.R file zephyr package example set package level option). Develop functions include zephyr functionalities want inform user - allowing specify verbosity_level directly argument options. Write documentation functions verbosity level can controlled options ```","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_params_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a character vector of parameters for package options — as_params_pkg","title":"Generate a character vector of parameters for package options — as_params_pkg","text":"function generates character vector parameters options defined using custom options functions. resulting vector can used documentation purposes.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_params_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a character vector of parameters for package options — as_params_pkg","text":"","code":"as_params_pkg(envir = NULL, include = NULL, exclude = NULL)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_params_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a character vector of parameters for package options — as_params_pkg","text":"envir environment containing options. Can NULL (default, uses calling environment), string (package name), environment object. include character vector option names include. NULL (default), options included. exclude character vector option names exclude. Default NULL.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_params_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a character vector of parameters for package options — as_params_pkg","text":"character vector parameter descriptions, element string describing option.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_params_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a character vector of parameters for package options — as_params_pkg","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming some options are defined in the current environment params <- as_params_pkg() cat(params, sep = \"\\n\")  # For a specific package params <- as_params_pkg(\"mypackage\") cat(params, sep = \"\\n\")  # Include only specific options params <- as_params_pkg(include = c(\"option1\", \"option2\")) cat(params, sep = \"\\n\")  # Exclude specific options params <- as_params_pkg(exclude = c(\"option3\", \"option4\")) cat(params, sep = \"\\n\") } # }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"function creates Roxygen2 documentation options specified package. formats options' descriptions, default values, environment variables structured manner suitable inclusion package documentation.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"","code":"as_roxygen_docs_pkg(pkg)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"pkg character string specifying name package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"character vector containing Roxygen2 documentation package options.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"function performs following steps: Retrieves options specified package. Formats option's description, default value, associated environment variable. Wraps long text improve readability documentation. Structures documentation using Roxygen2 LaTeX formatting commands. resulting documentation includes: description option default value (formatted code) option name use options() associated environment variable name behavior","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"function intended internal use package development documentation generation processes.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/as_roxygen_docs_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Roxygen Documentation for Package Options — as_roxygen_docs_pkg","text":"","code":"if (FALSE) { # \\dontrun{ # Generate documentation for a package named \"mypackage\" docs <- as_roxygen_docs_pkg(\"mypackage\")  # Print the generated documentation cat(paste(docs, collapse = \"\\n\")) } # }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/define_option_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an option — define_option_pkg","title":"Define an option — define_option_pkg","text":"function defines option package. attempts set option package environment. fails (e.g., due locked namespace), falls back setting global option \"zephyr.\" prefix.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/define_option_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an option — define_option_pkg","text":"","code":"define_option_pkg(   option,   default = NULL,   desc = NULL,   option_name = NULL,   envvar_name = NULL,   option_fn = NULL,   envvar_fn = NULL,   quoted = FALSE,   eager = FALSE,   envir = parent.frame(),   print_spec = TRUE )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/define_option_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an option — define_option_pkg","text":"option name option define. default default value option. desc description option. option_name name R option (defaults name). envvar_name name environment variable (defaults R_[uppercase name]). option_fn function process option value. envvar_fn function process environment variable value. quoted Whether option value quoted. eager Whether evaluate default value eagerly. envir environment define option. Defaults parent frame. print_spec Whether print option specification.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/define_option_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an option — define_option_pkg","text":"invisible option specification object.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/define_option_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an option — define_option_pkg","text":"","code":"define_option_pkg(\"verbosity_level\", default = \"verbose\", desc = \"Verbosity level for output\") #> verbosity_level = #>  #>   Verbosity level for output #>  #>   option  : verbosity_level #>   envvar  : R_VERBOSITY_LEVEL (evaluated if possible, raw string otherwise) #>  *default : \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_is_true_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","title":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","text":"function returns another function checks given environment variable option set value can interpreted true. first checks environment variable form R_OPTION_NAME exact name provided, falls back value set specified environment.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_is_true_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","text":"","code":"envvar_is_true_pkg(envir = NULL)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_is_true_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","text":"envir environment look option. Can NULL (default, uses .GlobalEnv), string (package name), environment.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_is_true_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","text":"function takes parameter 'x' (name option environment variable check) returns logical value: TRUE option environment variable set truthy value, FALSE otherwise.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_is_true_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an environment variable or option is set to a truthy value — envvar_is_true_pkg","text":"","code":"is_true <- envvar_is_true_pkg() Sys.setenv(R_MY_OPTION = \"true\") is_true(\"my_option\")  # Returns TRUE #> [1] TRUE  Sys.setenv(R_MY_OPTION = \"false\") is_true(\"my_option\")  # Returns FALSE #> [1] FALSE  Sys.setenv(MY_ENV_VAR = \"yes\") is_true(\"MY_ENV_VAR\")  # Returns TRUE #> [1] TRUE"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_str_split_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an environment variable or option string into a vector — envvar_str_split_pkg","title":"Split an environment variable or option string into a vector — envvar_str_split_pkg","text":"function returns another function splits given string (environment variable option) vector using specified delimiter, trims whitespace.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_str_split_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an environment variable or option string into a vector — envvar_str_split_pkg","text":"","code":"envvar_str_split_pkg(delim = \",\", envir = NULL)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_str_split_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an environment variable or option string into a vector — envvar_str_split_pkg","text":"delim delimiter use splitting string. Default \",\". envir environment look option. Can NULL (default, uses .GlobalEnv), string (package name), environment.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_str_split_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an environment variable or option string into a vector — envvar_str_split_pkg","text":"function takes parameters: x: name option environment variable check ...: Additional arguments (currently unused)","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/envvar_str_split_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an environment variable or option string into a vector — envvar_str_split_pkg","text":"","code":"split_fn <- envvar_str_split_pkg() Sys.setenv(R_MY_LIST_OPTION = \"item1,item2,item3\") split_fn(\"my_list_option\")  # Returns c(\"item1\", \"item2\", \"item3\") #> [1] \"item1\" \"item2\" \"item3\"  Sys.setenv(MY_ENV_LIST = \"x|y|z\") split_fn <- envvar_str_split_pkg(delim = \"|\") split_fn(\"MY_ENV_LIST\")  # Returns c(\"x\", \"y\", \"z\") #> NULL"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get All Verbosity Levels — get_all_verbosity_levels","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"function retrieves verbosity level settings various sources, including global options, environment variables, package-specific options, package environments, package-specific options using opt_pkg loaded packages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"","code":"get_all_verbosity_levels()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"list verbosity level settings. element list contains: env_name name environment setting found option_name name option variable value value verbosity level setting source source setting (e.g., \"option\", \"env\", \"pkg_env\", etc.)","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"function checks verbosity settings following ways: Global options ending \".verbosity_level\" (case-insensitive) Environment variables form \"R_*_VERBOSITY_LEVEL\" specific option \"zephyr.verbosity_level\" Package-specific options via opt_pkg function Options package environments Package-specific options using opt_pkg package environments loaded packages","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"function relies opt_pkg function available environment. opt_pkg found, catch error continue checks.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_all_verbosity_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get All Verbosity Levels — get_all_verbosity_levels","text":"","code":"# Set some options and environment variables for demonstration options(package1.verbosity_level = \"quiet\", Package2.Verbosity_Level = \"debug\") Sys.setenv(R_PACKAGE3_VERBOSITY_LEVEL = \"info\")  # Get all verbosity levels verbosity_levels <- get_all_verbosity_levels()  # Print results for (setting in verbosity_levels) {   cat(\"Environment:\", setting$env_name, \"\\n\")   cat(\"Option:\", setting$option_name, \"\\n\")   cat(\"Value:\", setting$value, \"\\n\")   cat(\"Source:\", setting$source, \"\\n\\n\") } #> Environment: Global  #> Option: Package2.Verbosity_Level  #> Value: debug  #> Source: option  #>  #> Environment: Global  #> Option: package1.verbosity_level  #> Value: quiet  #> Source: option  #>  #> Environment: Environment  #> Option: R_PACKAGE3_VERBOSITY_LEVEL  #> Value: info  #> Source: env  #>   # Clean up options(package1.verbosity_level = NULL, Package2.Verbosity_Level = NULL) Sys.unsetenv(\"R_PACKAGE3_VERBOSITY_LEVEL\")"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option_spec_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the option specification — get_option_spec_pkg","title":"Get the option specification — get_option_spec_pkg","text":"function retrieves option specification given option name.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option_spec_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the option specification — get_option_spec_pkg","text":"","code":"get_option_spec_pkg(x, envir = NULL, print_spec = FALSE)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option_spec_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the option specification — get_option_spec_pkg","text":"x name option. envir environment look option. Can NULL (default), string (package name), environment. print_spec Whether print option specification.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option_spec_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the option specification — get_option_spec_pkg","text":"option specification object, NULL found.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_option_spec_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the option specification — get_option_spec_pkg","text":"","code":"define_option_pkg(\"my_option\", default = 42) #> my_option = #>  #>    #>  #>   option  : my_option #>   envvar  : R_MY_OPTION (evaluated if possible, raw string otherwise) #>  *default : 42 get_option_spec_pkg(\"my_option\") #> $name #> [1] \"my_option\" #>  #> $expr #> [1] 42 #>  #> $desc #> NULL #>  #> $option_name #> [1] \"my_option\" #>  #> $envvar_name #> [1] \"R_MY_OPTION\" #>  #> $option_fn #> NULL #>  #> $envvar_fn #> NULL #>  #> $envir #> <environment: 0x5620d00776b8> #>  #> attr(,\"class\") #> [1] \"option_spec_pkg\" get_option_spec_pkg(\"my_option\", envir = \"zephyr\") #> NULL"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_env_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Package Name and Environment Variable Verbosity Level — get_package_name_and_env_verbosity","title":"Get Package Name and Environment Variable Verbosity Level — get_package_name_and_env_verbosity","text":"function determines calling package name checks corresponding environment variable sets verbosity level.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_env_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Package Name and Environment Variable Verbosity Level — get_package_name_and_env_verbosity","text":"","code":"get_package_name_and_env_verbosity()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_env_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Package Name and Environment Variable Verbosity Level — get_package_name_and_env_verbosity","text":"list three elements: package_name character string detected package name, NULL global environment env_var_name character string name environment variable verbosity_level character string verbosity level, NULL set invalid","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_env_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Package Name and Environment Variable Verbosity Level — get_package_name_and_env_verbosity","text":"","code":"result <-  get_package_name_and_env_verbosity() #> Function called from global environment or unable to determine package name. print(result) #> $env_var_name #> NULL #>  #> $verbosity_level #> NULL #>"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Package Name and Verbosity Level — get_package_name_and_verbosity","title":"Get Package Name and Verbosity Level — get_package_name_and_verbosity","text":"function determines calling package name checks corresponding verbosity level option. works package environments, devtools environments, global environment.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Package Name and Verbosity Level — get_package_name_and_verbosity","text":"","code":"get_package_name_and_verbosity()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_verbosity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Package Name and Verbosity Level — get_package_name_and_verbosity","text":"list two elements: package_name character string detected package name, NULL global environment verbosity_level character string verbosity level, NULL set","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_name_and_verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Package Name and Verbosity Level — get_package_name_and_verbosity","text":"","code":"result <-  get_package_name_and_verbosity() #> Function called from global environment or unable to determine package name. print(result) #> $verbosity_level #> NULL #>"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Package Option — get_package_option","title":"Get Package Option — get_package_option","text":"function searches specified option within package environment. looks objects either end given option name match exactly. search case-insensitive.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Package Option — get_package_option","text":"","code":"get_package_option(option_name, pkg_env)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Package Option — get_package_option","text":"option_name character string specifying name option search . pkg_env package environment search . environment object.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Package Option — get_package_option","text":"name matching option found, otherwise NULL.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Package Option — get_package_option","text":"function first searches main package environment. option found , checks .options environment exists within package environment. multiple matching options found, returns first one issues warning.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Package Option — get_package_option","text":"function return value option, name. get value, use opt_pkg(result, envir = pkg_env) returned result.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_package_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Package Option — get_package_option","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'my_package' is loaded and has an option 'verbosity_level' pkg_env <- asNamespace(\"my_package\") option_name <- get_package_option(\"verbosity_level\", pkg_env) if (!is.null(option_name)) {   option_value <- opt_pkg(option_name, envir = pkg_env)   print(paste(\"Value of\", option_name, \"is\", option_value)) } } # }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get verbosity level with priority hierarchy — get_verbosity_level","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"function retrieves verbosity_level option using priority hierarchy. checks various sources verbosity level setting returns first valid value finds. examples use \"zephyr\", function works package.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"","code":"get_verbosity_level(env = parent.frame())"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"env Environment search package-specific option (default: parent.frame())","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"Character string representing verbosity level: \"quiet\", \"minimal\", \"verbose\", \"debug\"","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"function checks verbosity level following order: Global package-specific option (e.g., options(\"packagename.verbosity_level\")) Package-specific environment variable (e.g., R_PACKAGENAME_VERBOSITY_LEVEL) Global zephyr package option (options(\"zephyr.verbosity_level\")) Zephyr environment variable (R_ZEPHYR_VERBOSITY_LEVEL) Package-specific options using opt_pkg(\"verbosity_level\") Default value (\"verbose\") Replace package actual package name . Verbosity levels, least verbose: \"quiet\": messages \"minimal\": essential messages \"verbose\": Informative messages (default) \"debug\": Detailed messages debugging function primarily used msg function family determine whether display messages based current verbosity level.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get verbosity level with priority hierarchy — get_verbosity_level","text":"","code":"# Note: These examples use \"zephyr\" as the package name, but the function # works with any package name. Replace \"zephyr\" with your package name in practice.  # Default behavior get_verbosity_level()  # Returns \"verbose\" #> [1] \"verbose\"  # Using withr::with_envvar to temporarily set verbosity level if (requireNamespace(\"withr\", quietly = TRUE)) {   withr::with_envvar(     new = c(\"R_VERBOSITY_LEVEL\" = \"quiet\"),     code = print(get_verbosity_level())  # Prints \"quiet\"   ) } #> [1] \"quiet\"  # Verbosity level is back to default after with_envvar get_verbosity_level()  # Returns \"verbose\" #> [1] \"verbose\"  # Set a global package-specific option options(zephyr.verbosity_level = \"debug\") get_verbosity_level()  # Returns \"debug\" #> [1] \"debug\"  # Set a package-specific environment variable Sys.setenv(R_ZEPHYR_VERBOSITY_LEVEL = \"minimal\") get_verbosity_level()  # Returns \"debug\" (option has priority over env var) #> [1] \"debug\"  # Remove the global option to see the effect of the environment variable options(zephyr.verbosity_level = NULL) get_verbosity_level()  # Returns \"minimal\" #> [1] \"minimal\"  # Reset to default options(zephyr.verbosity_level = NULL) Sys.unsetenv(\"R_ZEPHYR_VERBOSITY_LEVEL\") get_verbosity_level()  # Returns \"verbose\" (default) #> [1] \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Write messages based on verbosity level — msg","title":"Write messages based on verbosity level — msg","text":"msg function general function writing messages console based options set using options package. default, option called verbosity_level set package defining function calling msg used. global option prefix zephyr. set, overwrite package level option. Valid values quiet, minimal, verbose, debug. quiet: messages displayed minimal: essential messages displayed verbose: Informative messages displayed (default) debug: Detailed messages debugging displayed","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write messages based on verbosity level — msg","text":"","code":"msg(   message,   levels_to_write = c(\"minimal\", \"verbose\", \"debug\"),   msg_fun = cli::cli_alert_info,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )  msg_debug(   message,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )  msg_success(   message,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )  msg_minimal(   message,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write messages based on verbosity level — msg","text":"message character message write levels_to_write character vector levels verbosity display message. Valid values quiet, minimal, verbose, debug msg_fun function taking message first argument. Usually cli_... function ... Additional arguments passed msg_fun verbosity_level verbosity level use. NULL, function use argument determine environment find option called verbosity_level. default, look environment function calling msg(_...). option set calling environment, look zephyr namespace. integer passed sys.function() case verbosity_level = NULL. Default -1, meaning look environment function calling msg(_...). .envir environment passed msg_fun","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write messages based on verbosity level — msg","text":"None","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write messages based on verbosity level — msg","text":"msg function general function, can used write messages based options. msg_debug function wrapper around msg levels_to_write = \"debug\" msg_fun = cli::cli_inform. msg_success function wrapper around msg levels_to_write = c(\"minimal\", \"verbose\", \"debug\") msg_fun = cli::cli_alert_success. msg_minimal function wrapper around msg levels_to_write = c(\"minimal\", \"verbose\", \"debug\") msg_fun = cli::cli_alert_info.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write messages based on verbosity level — msg","text":"","code":"filter_data <- function(data, infilter, ...) {   infilter_e <- rlang::enquo(infilter)   infilter_lb <- rlang::as_label(infilter_e)    msg(     \"Attempting to filter {.field data} by {.field {infilter_lb}}\",     levels_to_write = c(\"verbose\", \"debug\"),     msg_fun = cli::cli_h2   )    msg_debug(\"debug: Trying to filter data\")    result <- data |>     dplyr::filter({{infilter}})    msg_success(\"success: Data filtered by {.field {infilter_lb}}\")   msg_minimal(\"minimal: Filtered {nrow(result)} rows\")    head(result) }  # Test with different verbosity levels withr::with_options(list(verbosity_level = \"quiet\"),   filter_data(data = cars, infilter = speed > 12)) #>   speed dist #> 1    13   26 #> 2    13   34 #> 3    13   34 #> 4    13   46 #> 5    14   26 #> 6    14   36  withr::with_options(list(verbosity_level = \"minimal\"),   filter_data(data = cars, infilter = speed > 12)) #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows #>   speed dist #> 1    13   26 #> 2    13   34 #> 3    13   34 #> 4    13   46 #> 5    14   26 #> 6    14   36  withr::with_options(list(verbosity_level = \"verbose\"),   filter_data(data = cars, infilter = speed > 12)) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows #>   speed dist #> 1    13   26 #> 2    13   34 #> 3    13   34 #> 4    13   46 #> 5    14   26 #> 6    14   36  withr::with_options(list(verbosity_level = \"debug\"),   filter_data(data = cars, infilter = speed > 12)) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> debug: Trying to filter data #> ✔ success: Data filtered by speed > 12 #> ℹ minimal: Filtered 35 rows #>   speed dist #> 1    13   26 #> 2    13   34 #> 3    13   34 #> 4    13   46 #> 5    14   26 #> 6    14   36"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of an option — opt_pkg","title":"Get the value of an option — opt_pkg","text":"function retrieves value option, considering various possible sources.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of an option — opt_pkg","text":"","code":"opt_pkg(option_name, default = NULL, envir = NULL)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value of an option — opt_pkg","text":"option_name name option retrieve. default default value return option found. envir environment look option. Can : environment string specifying package name NULL (default), uses caller's environment","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of an option — opt_pkg","text":"value option.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of an option — opt_pkg","text":"","code":"define_option_pkg(\"my_option\", default = 42) #> my_option = #>  #>    #>  #>   option  : my_option #>   envvar  : R_MY_OPTION (evaluated if possible, raw string otherwise) #>  *default : 42 opt_pkg(\"my_option\") #> [1] \"false\" opt_pkg(\"verbosity_level\", envir = \"zephyr\") #> [1] \"verbose\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_source_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the source of an option value — opt_source_pkg","title":"Determine the source of an option value — opt_source_pkg","text":"function determines source option value (package environment, global option, environment variable, default).","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_source_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the source of an option value — opt_source_pkg","text":"","code":"opt_source_pkg(spec, envir = NULL)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_source_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the source of an option value — opt_source_pkg","text":"spec option specification object. envir environment look option. Can NULL (default), string (package name), environment.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_source_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the source of an option value — opt_source_pkg","text":"character string indicating source option value: \"package\", \"option\", \"envvar\", \"default\".","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opt_source_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the source of an option value — opt_source_pkg","text":"","code":"spec <- get_option_spec_pkg(\"verbosity_level\", envir = \"zephyr\") opt_source_pkg(spec, envir = \"zephyr\") #> [1] \"default\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/option_spec_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an option specification — option_spec_pkg","title":"Create an option specification — option_spec_pkg","text":"function creates option specification various parameters.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/option_spec_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an option specification — option_spec_pkg","text":"","code":"option_spec_pkg(   name,   default = NULL,   desc = NULL,   option_name = NULL,   envvar_name = NULL,   option_fn = NULL,   envvar_fn = NULL,   quoted = FALSE,   eager = FALSE,   envir = parent.frame(),   print_spec = TRUE )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/option_spec_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an option specification — option_spec_pkg","text":"name name option. default default value option. desc description option. option_name name R option (defaults name). envvar_name name environment variable (defaults R_[uppercase name]). option_fn function process option value. envvar_fn function process environment variable value. quoted Whether option value quoted. eager Whether evaluate default value eagerly. envir environment evaluate option. print_spec Whether print option specification.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/option_spec_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an option specification — option_spec_pkg","text":"invisible option specification object.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/option_spec_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an option specification — option_spec_pkg","text":"","code":"option_spec_pkg(\"my_option\", default = 42, desc = \"An example option\") #> my_option = #>  #>   An example option #>  #>   option  : my_option #>   envvar  : R_MY_OPTION (evaluated if possible, raw string otherwise) #>  *default : 42"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opts_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Package Options — opts_pkg","title":"Get Package Options — opts_pkg","text":"function retrieves options set package environment. can return just names options, option values, full option details.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opts_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Package Options — opts_pkg","text":"","code":"opts_pkg(envir = NULL, names_only = FALSE, full = FALSE)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opts_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Package Options — opts_pkg","text":"envir environment search options. Can NULL (default, uses calling environment), string (package name), environment object. names_only Logical. TRUE, returns names options. Default FALSE. full Logical. TRUE, returns full option specifications including details. Default FALSE.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opts_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Package Options — opts_pkg","text":"Depending parameters: names_only = TRUE: character vector option names. full = TRUE: list full option specifications. Otherwise: list option values (default behavior).","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/opts_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Package Options — opts_pkg","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'mypackage' has some options set # Get option names opts_pkg(\"mypackage\", names_only = TRUE)  # Get option values (default behavior) opts_pkg(\"mypackage\")  # Get full option details opts_pkg(\"mypackage\", full = TRUE) } # }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a package-specific option — remove_option_pkg","title":"Remove a package-specific option — remove_option_pkg","text":"function removes package-specific option previously set using define_option_pkg function.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a package-specific option — remove_option_pkg","text":"","code":"remove_option_pkg(option, envir = parent.frame(), silent = TRUE)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a package-specific option — remove_option_pkg","text":"option character string specifying name option remove. envir environment .options environment located. Default parent.frame(). silent Logical; TRUE (default), suppresses messages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a package-specific option — remove_option_pkg","text":"Invisible NULL. function called side effect removing option.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove a package-specific option — remove_option_pkg","text":"function removes specified option .options environment within given environment. .options environment specified option exist, function nothing. default, function operates silently, setting silent = FALSE display informative messages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/remove_option_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a package-specific option — remove_option_pkg","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming we have previously set an option: # define_option_pkg(\"my_option\", default = \"value\")  # To remove the option silently (default behavior): remove_option_pkg(\"my_option\")  # To remove the option with messages: remove_option_pkg(\"my_option\", silent = FALSE) } # }"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Report collection of assertions — report_checkmate_assertions","title":"Report collection of assertions — report_checkmate_assertions","text":"Improved reporting AssertCollections created checkmate::makeAssertCollection() package using cli::cli_abort() instead checkmate::reportAssertions() order provide informative error message. function intended used inside function performs assertions input arguments. See example.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"report_checkmate_assertions(   collection,   msg = \"Invalid input(s):\",   env = parent.frame() )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report collection of assertions — report_checkmate_assertions","text":"collection collection assertions created checkmate::makeAssertCollection() msg character() Header error message assertions failed env environment() Environment use error message","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"add_numbers <- function(a, b) {   collection <- checkmate::makeAssertCollection()   checkmate::assert_numeric(x = a, add = collection)   checkmate::assert_numeric(x = b, add = collection)   report_checkmate_assertions(collection)   return(a + b) }  add_numbers(1, 2) #> [1] 3 try(add_numbers(1, \"b\")) #> Error in add_numbers(1, \"b\") : Invalid input(s): #> ✖ Variable 'b': Must be of type 'numeric', not 'character'. try(add_numbers(\"a\", \"b\")) #> Error in add_numbers(\"a\", \"b\") : Invalid input(s): #> ✖ Variable 'a': Must be of type 'numeric', not 'character'. #> ✖ Variable 'b': Must be of type 'numeric', not 'character'."},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/validate_verbosity_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate verbosity level — validate_verbosity_level","title":"Validate verbosity level — validate_verbosity_level","text":"Validate verbosity level","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/validate_verbosity_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate verbosity level — validate_verbosity_level","text":"","code":"validate_verbosity_level(level)"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/validate_verbosity_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate verbosity level — validate_verbosity_level","text":"level verbosity level validate","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/validate_verbosity_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate verbosity level — validate_verbosity_level","text":"valid verbosity level","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","title":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","text":"Tools helping developers R packages inform users. Package enables writing messages based package level options.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","text":"Maintainer: Aksel Thomsen oath@novonordisk.com Authors: Mathias Lerbech Jeppesen nmlj@novonordisk.com Cervan Girard cgid@novonordisk.com Kristian Troejelsgaard ktqn@novonordisk.com Lovemore Gakava lvgk@novonordisk.com Steffen Falgreen Larsen sffl@novonordisk.com Vladimir Obucina vlob@novonordisk.com contributors: Novo Nordisk /S [copyright holder]","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-002","dir":"Changelog","previous_headings":"","what":"zephyr 0.0.2","title":"zephyr 0.0.2","text":"Update internal release R version 4.4.1","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-001","dir":"Changelog","previous_headings":"","what":"zephyr 0.0.1","title":"zephyr 0.0.1","text":"Added initial tools writing messages console based package options","code":""}]
