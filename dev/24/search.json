[{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2024 Novo Nordisk A/S, Danish company registration no. 24256790  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aksel Thomsen. Author, maintainer. Mathias Lerbech Jeppesen. Author. Cervan Girard. Author. Kristian Troejelsgaard. Author. Lovemore Gakava. Author. Steffen Falgreen Larsen. Author. Vladimir Obucina. Author. Novo Nordisk /S. Copyright holder.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomsen , Jeppesen M, Girard C, Troejelsgaard K, Gakava L, Larsen S, Obucina V (2024). zephyr: Tools Informing Users Based Package Options. R package version 0.0.4, https://github.com/NovoNordisk-OpenSource/zephyr, https://novonordisk-opensource.github.io/zephyr/.","code":"@Manual{,   title = {zephyr: Tools for Informing Users Based on Package Options},   author = {Aksel Thomsen and Mathias Lerbech Jeppesen and Cervan Girard and Kristian Troejelsgaard and Lovemore Gakava and Steffen Falgreen Larsen and Vladimir Obucina},   year = {2024},   note = {R package version 0.0.4, https://github.com/NovoNordisk-OpenSource/zephyr},   url = {https://novonordisk-opensource.github.io/zephyr/}, }"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"zephyr-","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"zephyr package provides small functionalities developers R packages inform users progress issues, time allowing easily configure amount information want receive package level options. probably encountered arguments like verbose silent miscellaneous functions. arguments used control whether print information console, developer function usually done logical check inside function, TRUE, print information console. developer, logical checks explicitly time information printed () can create lot redundant code. users, need set argument function call time want change default behaviour, often users left dichotomy either getting every piece information none. zephyr package provides tools making easier developers end users. done providing functionalities writing messages automatically performs logical check based verbosity level set package options. verbosity level can set package level, user can easily configure verbosity level setting options environmental variables either package level prefix packagename., globally alter behavior functions zephyr setting options environmental variables prefix zephyr..","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"zephyr-message-functionalities","dir":"","previous_headings":"","what":"Zephyr message functionalities","title":"Tools for Informing Users Based on Package Options","text":"functionalities intented used developers R packages. basic principle functions explained showed use functions context R package development.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"basic-features","dir":"","previous_headings":"Zephyr message functionalities","what":"Basic features","title":"Tools for Informing Users Based on Package Options","text":"backbone functions zephyr msg, msg_debug msg_success collectively referred msg functions remainder README. common documentation page can accessed ?msg. purpose functions write messages console dependent verbosity_level can specified options. Specifically, outlined message written console verbosity_level matching level levels_to_write. Note able control function use writing messages console argument msg_fun (default msg_fun = cli::cli_alert_info), wrapper functions msg_debug msg_success available (see documentation using ?msg) default msg_fun = cli::cli_inform msg_fun = cli::cli_alert_success, respectively.","code":"msg(\"testing\",     levels_to_write = c(\"verbose\", \"debug\"),     verbosity_level = \"verbose\") #> ℹ testing  msg(\"testing\",     levels_to_write = c(\"verbose\", \"debug\"),     verbosity_level = \"quiet\")"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"controlling-the-verbosity-level-through-options","dir":"","previous_headings":"Zephyr message functionalities","what":"Controlling the verbosity level through options","title":"Tools for Informing Users Based on Package Options","text":"verbosity level can specified argument withing function. However, behavior can controlled package level options. default, verbosity_level = NULL, means fetch verbosity_level option set zephyr package function used ‘directly’, function used inside another function, fetch verbosity_level option set package function called msg function.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"setting-a-package-option-using-the-options-package","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through options","what":"Setting a package option using the options package","title":"Tools for Informing Users Based on Package Options","text":"Note much information options package available package’s pkgdown, provided minimal introduction understand usage context zephyr package. zephyr package, set package level verbosity_level option including following code file /R. verbosity_level argument specified (.e. left verbosity_level = NULL), msg function fetch verbosity_level option set zephyr package:","code":"options::define_option(   option = \"verbosity_level\",   default = \"verbose\",   desc = \"Controls verbosity level in this package (overwritable using option   `zephyr.verbosity_level` across all packages using `zephyr` functions).   Options are 'debug', 'verbose' and 'quiet'\",   envir = getNamespace(\"zephyr\") ) #>  #> verbosity_level = \"verbose\" #>  #>   Controls verbosity level in this package (overwritable using option #>   `zephyr.verbosity_level` across all packages using `zephyr` #>   functions).  Options are 'debug', 'verbose' and 'quiet' #>  #>   option  : zephyr.verbosity_level #>   envvar  : R_ZEPHYR_VERBOSITY_LEVEL (evaluated if possible, raw string otherwise) #>  *default : \"verbose\" # Will not write a message withr::with_envvar(list(R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\"), {   msg(\"testing\") }) # Will write a message withr::with_options(list(zephyr.verbosity_level = \"debug\"), {   msg_debug(\"testing\") }) #> testing # Default set option is \"verbose\", so this will also write a message msg_success(\"testing\") #> ✔ testing"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"usage-in-r-package-development","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through options","what":"Usage in R package development","title":"Tools for Informing Users Based on Package Options","text":"verbosity_level option can also specified developer’s R package. , behavior msg functions controlled package level option, users can easily control verbosity level entire package. default msg functions fetch verbosity_level option set package function wherein msg function called.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"simulating-creation-of-a-package","dir":"","previous_headings":"Zephyr message functionalities > Controlling the verbosity level through options > Usage in R package development","what":"Simulating creation of a package","title":"Tools for Informing Users Based on Package Options","text":"create environment option verbosity_level specified (Note: looking helper script option set differently described package - define option package, use approach), function foo uses msg function:","code":"source(\"R/test_vignette_helpers.R\") foo_pkg <- create_env_with_fun(   message = \"Hello from foo_pkg!\",   fun_name = \"foo\",   fun = function() {     msg_debug(\"Inform my user the function is trying to do stuff\")     # Do stuff     msg_success(\"Inform my user that stuff succeeded\")   } )  # foo function foo_pkg$foo #> function ()  #> { #>     msg_debug(\"Inform my user the function is trying to do stuff\") #>     msg_success(\"Inform my user that stuff succeeded\") #> } #> <environment: 0x2f972098>  # Option set in package: foo_pkg$.options #>  #> verbosity_level = NULL #>  #>   Option for testing #>  #>   option  : foo_pkg.verbosity_level #>   envvar  : R_FOO_PKG_VERBOSITY_LEVEL (evaluated if possible, raw string otherwise) #>  *default : default"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"default-implicit-behavior-when-using-msg-functions-in-your-package","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"default msg functions fetch verbosity_level option set foo_pkg calling foo: However, feature package (specifically get_verbosity_level function) can set verbosity level zephyr functionalities globally setting zephyr.verbosity_level option, override individual package level options: Setting environmental variable R_ZEPHYR_VERBOSITY_LEVEL override package level option case package level option set using foo_pkg_verbosity_level:","code":"# Does not write a message withr::with_envvar(list(R_FOO_PKG_VERBOSITY_LEVEL = \"quiet\"), {   foo_pkg$foo() })  # Writes a message withr::with_options(list(foo_pkg.verbosity_level = \"debug\"), {   foo_pkg$foo() }) #> Inform my user the function is trying to do stuff #> ✔ Inform my user that stuff succeeded # Writes a message withr::with_options(list(   foo_pkg.verbosity_level = \"quiet\",   zephyr.verbosity_level = \"verbose\" ), {   foo_pkg$foo() }) #> ✔ Inform my user that stuff succeeded # Will not write a message since the Zephyr environment variable overrides the package level withr::with_envvar(list(   R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\",   R_FOO_PKG_VERBOSITY_LEVEL = \"verbose\" ), {   foo_pkg$foo() })  # Will write a message since option overrides the Zephyr environment variable withr::with_envvar(list(R_ZEPHYR_VERBOSITY_LEVEL = \"quiet\"), {   withr::with_options(list(foo_pkg.verbosity_level = \"verbose\"), {     foo_pkg$foo()   }) }) #> ✔ Inform my user that stuff succeeded"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"controlling-verbosity-level-through-options-with-more-transparency-for-the-user","dir":"","previous_headings":"","what":"Tools for Informing Users Based on Package Options","title":"Tools for Informing Users Based on Package Options","text":"default behavior described can used control verbosity level package level options without specify anything. case, write documentation functions verbosity level can controlled options. case transparent solution wanted, package level option can set, zephyr::get_verbosity_level(env = getNamespace(\"foo_pkg\")) can used set default value function (options::opt(\"verbosity_level\", env = getNamespace(\"foo_pkg\")) function case ’s wanted able override options “global zephyr level”). creating function foo package foo_pkg solution look like :","code":"foo <- function(my_arg,                 verbosity_level = zephyr::get_verbosity_level(env = getNamespace(\"foo_pkg\"))) {   zephyr::msg_debug(\"Inform my user the function is trying to do stuff\",                     verbosity_level = verbosity_level)   # Do stuff   zephyr::msg_success(\"Inform my user that stuff succeeded\", verbosity_level = verbosity_level) }"},{"path":"https://novonordisk-opensource.github.io/zephyr/index.html","id":"summary-of-how-to-use-zephyr-in-your-package","dir":"","previous_headings":"Zephyr message functionalities","what":"Summary of how to use zephyr in your package","title":"Tools for Informing Users Based on Package Options","text":"Set verbosity_level package level option package (see R/package_options.R file zephyr package example shown earlier section) Develop functions include zephyr functionalities want inform user - allowing specify verbosity_level directly argument options. Write documentation functions verbosity level can controlled options - see easily write reusable documentation options package ","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_envname_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of the opt_source for an environment variable based on options package version — get_envname_options","title":"Get the value of the opt_source for an environment variable based on options package version — get_envname_options","text":"See breaking change version 0.2.0 changelog : https://dgkf.github.io/options/news/index.html. Function gives value returned opt_source(). used inside get_verbosity_level() function.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_envname_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of the opt_source for an environment variable based on options package version — get_envname_options","text":"","code":"get_envname_options()"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_envname_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of the opt_source for an environment variable based on options package version — get_envname_options","text":"character value opt_source environment variable","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_envname_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of the opt_source for an environment variable based on options package version — get_envname_options","text":"","code":"get_envname_options() #> [1] \"envvar\""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","title":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","text":"Get option using options package, function allows global option overwrite individual package options.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","text":"","code":"get_verbosity_level(env = parent.frame())"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","text":"env Environment get option (set options package)","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","text":"Value option","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/get_verbosity_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get verbosity_level option using the options package, allowing a global option — get_verbosity_level","text":"","code":"# Setting a \"global option\" overwrites the behavior, i.e. example below will # never write anything to the console no matter the option set in the # package where the filter_data function is located (as an example this package # is here called \"newpackage\")  filter_data <- function(data, infilter, ...) {    #Defusing the filter arguments   infilter_e <- rlang::enquo(infilter)   infilter_lb <- rlang::as_label(infilter_e)    msg(\"Filtering {.field data} by {.field {infilter_lb}}\",     levels_to_write = c(\"verbose\", \"debug\"),     msg_fun = cli::cli_h2)    #Adding a debug message that only will appear if verbosity level is set to   \"debug\"   msg_debug(\"Trying to filter data\")    data |>     dplyr::filter({{infilter}})    msg_success(\"Data filtered by {.field {infilter_lb}}\")  }  withr::with_options( list(zephyr.verbosity_level = \"verbose\",      newpacakge.verbosity_level = \"verbose\"),      filter_data(data = cars, infilter = speed > 12) ) #>  #> ── Filtering data by speed > 12 ── #>  #> ✔ Data filtered by speed > 12  withr::with_options(   list(zephyr.verbosity_level = \"quiet\",        newpacakge.verbosity_level = \"verbose\"),        filter_data(data = cars, infilter = speed > 12) )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Write messages based on verbosity level — msg","title":"Write messages based on verbosity level — msg","text":"msg function general function writing messages console based options set using options package. default, option called verbosity_level set package defining function calling msg used. global option prefix zephyr. set, overwrite package level option. Valid values quiet, verbose debug. verbose used levels_to_write vector argument developer wants inform user something. debug ised developer wants give user extra information can help debugging. See example possible use case.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write messages based on verbosity level — msg","text":"","code":"msg(   message,   levels_to_write = c(\"verbose\", \"debug\"),   msg_fun = cli::cli_alert_info,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )  msg_debug(   message,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )  msg_success(   message,   ...,   verbosity_level = NULL,   which = -1,   .envir = parent.frame() )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write messages based on verbosity level — msg","text":"message character message write levels_to_write character vector levels verbosity display message. Valid values quiet, verbose debug msg_fun function taking message first argument. Usually cli_... function ... Additional arguments passed msg_fun verbosity_level verbosity level use. NULL, function use argument determine environment find option called verbosity_level. default, look environment function calling msg(_...). option set calling environment, look zephyr namespace. integer passed sys.function() case verbosity_level = NULL. Default -1, meaning look environment function calling msg(_...). .envir environment passed msg_fun","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write messages based on verbosity level — msg","text":"None","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write messages based on verbosity level — msg","text":"msg function general function, can used write messages based options. msg_debug function wrapper around msg levels_to_write = \"debug\" msg_fun = cli::cli_inform, msg_success function wrapper around msg levels_to_write = c(\"verbose\", \"debug\") msg_fun = cli::cli_alert_success.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write messages based on verbosity level — msg","text":"","code":"filter_data <- function(data, infilter, ...) {    #Defusing the filter arguments   infilter_e <- rlang::enquo(infilter)   infilter_lb <- rlang::as_label(infilter_e)    msg(\"Attempting to filter {.field data} by {.field {infilter_lb}}\",     levels_to_write = c(\"verbose\", \"debug\"),     msg_fun = cli::cli_h2)    #Adding a debug message that only will appear if verbosity level is set to   \"debug\"   msg_debug(\"Trying to filter data\")    data |>     dplyr::filter({{infilter}})    msg_success(\"Data filtered by {.field {infilter_lb}}\")  }  withr::with_options( list(zephyr.verbosity_level = \"verbose\"),      filter_data(data = cars, infilter = speed > 12) ) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> ✔ Data filtered by speed > 12  withr::with_options(   list(zephyr.verbosity_level = \"debug\"),        filter_data(data = cars, infilter = speed > 12) ) #>  #> ── Attempting to filter data by speed > 12 ── #>  #> Trying to filter data #> ✔ Data filtered by speed > 12"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Report collection of assertions — report_checkmate_assertions","title":"Report collection of assertions — report_checkmate_assertions","text":"Improved reporting AssertCollections created checkmate::makeAssertCollection() package using cli::cli_abort() instead checkmate::reportAssertions() order provide informative error message. function intended used inside function performs assertions input arguments. See example.","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"report_checkmate_assertions(   collection,   msg = \"Invalid input(s):\",   env = parent.frame() )"},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report collection of assertions — report_checkmate_assertions","text":"collection collection assertions created checkmate::makeAssertCollection() msg character() Header error message assertions failed env environment() Environment use error message","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/report_checkmate_assertions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report collection of assertions — report_checkmate_assertions","text":"","code":"add_numbers <- function(a, b) {   collection <- checkmate::makeAssertCollection()   checkmate::assert_numeric(x = a, add = collection)   checkmate::assert_numeric(x = b, add = collection)   report_checkmate_assertions(collection)   return(a + b) }  add_numbers(1, 2) #> [1] 3 try(add_numbers(1, \"b\")) #> Error in add_numbers(1, \"b\") : Invalid input(s): #> ✖ Variable 'b': Must be of type 'numeric', not 'character'. try(add_numbers(\"a\", \"b\")) #> Error in add_numbers(\"a\", \"b\") : Invalid input(s): #> ✖ Variable 'a': Must be of type 'numeric', not 'character'. #> ✖ Variable 'b': Must be of type 'numeric', not 'character'."},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","title":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","text":"Tools helping developers R packages inform users. Package enables writing messages based package level options.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/zephyr/reference/zephyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"zephyr: Tools for Informing Users Based on Package Options — zephyr-package","text":"Maintainer: Aksel Thomsen oath@novonordisk.com Authors: Mathias Lerbech Jeppesen nmlj@novonordisk.com Cervan Girard cgid@novonordisk.com Kristian Troejelsgaard ktqn@novonordisk.com Lovemore Gakava lvgk@novonordisk.com Steffen Falgreen Larsen sffl@novonordisk.com Vladimir Obucina vlob@novonordisk.com contributors: Novo Nordisk /S [copyright holder]","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-002","dir":"Changelog","previous_headings":"","what":"zephyr 0.0.2","title":"zephyr 0.0.2","text":"Update internal release R version 4.4.1","code":""},{"path":"https://novonordisk-opensource.github.io/zephyr/news/index.html","id":"zephyr-001","dir":"Changelog","previous_headings":"","what":"zephyr 0.0.1","title":"zephyr 0.0.1","text":"Added initial tools writing messages console based package options","code":""}]
